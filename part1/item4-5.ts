// ## items4. 구조적 타이핑에 익숙해지기

// - 자바스크립트는 본질적으로 덕 타이핑기반이다.
    
//     타입스크립트는 어떤 함수의 매개변수 값이 모두 제대로 주어진다면 그 값이 어떻게 만들어졌는지 신경 않고 사용하는 동작을 그대로 모델링한다.
    

// sum : 

// - 자바스크립트가 덕파이핑 기반, 타입스크립트가 이를 모델링하기 위해 구조적 타이핑을 사용.
//     - 어떤 인터페이스에 할당 가능한 값이라면 타입 선언에 명시적으로 나열된 속성들ㅇ르 가지고 있을것임.
// - 클래스 역시 구조적 타이핑 규칙을 따른다는 것을 명심해야한다.
// - 구조적 타이핑을 사용하면 유닛 테스팅을 손쉽게 할 수 있다.

// ## items5. any 타입지양하기

// - 타입스크립트의 타입 특징 중 하나는 언제든지 타입 체커를 해제할 수 있는 선택적인 시스템을 가지고 있다는 것 → any 타입
// - 타입체커를 통해 코드 안에 오류를 찾아냈다면 이건 as나 any를 추가하여 해결할 수 있습니다.
    
//     근데 저자는 되도록이면 any타입을 쓰면 앞으로 쓰는 코드들에게서 타입스크립트의 장점을 볼 수 없게될 거라 말합니다. any를 지양하는 이유는 뭘까요?
    
// 1. any타입에는 타입 안정성이 없다 → 잘못된 타입으로 다른 쪽에서 문제 발생우려 있음
// 2. any는 함수 약속을 무시해버린다. 
// 3. any타입에는 언어 서비스가 적용되지 않는다. → 타입스크립트 언어 서비스에서 제공해주는 자동 완성 기능과 적정한 도움말을 받을 수 없기 때문에 코드 칠 때 어려움을 겪을 수 있음.
// 4. any타입은 코드 리팩터링 때 버그를 감춘다.
// 5. any는 타입 설계를 감춰버린다.
    
//     → 객체를 정의할 때 특히 문제가 되는 점이, 상태 객체의 설계를 감춰버리기 때문에 any타입 사용지양 → 타입설계는 깔끔한 코드, 정확 명료한 코드를 하기 위해서 필수이기에..!
    
//     - 그래도 any타입을 쓰시겠다?
    
//     → 타입 설계가 불분명해져 설계가 똥이 되어가는지 오류만 뿡뿡 쌓여가는지 알 수 없어져 같이 플잭을 하는 동료가 당신의 any타입의 흔적을 본다면 다음 플젝도 그 동료가 같이 할 거란 확답은 못하겠다. 그만큼 any타입은 코드를 다시 재구성해야할 수 있는 위험성이 크다.
    
     
    
// 6. any는 타입시스템의 신뢰도를 떨어뜨린다.
    
//     → any타입을 쓰지않으면 런타임에 발견될 오류를 미리 잡을 수 있고 신뢰도를 높일 수 있다.